{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Archive Viewer","text":"<p>The Archive Viewer is a python application </p>"},{"location":"archive_viewer/","title":"Archive Viewer","text":""},{"location":"archive_viewer/#archive_viewer.archive_viewer.ArchiveViewer","title":"<code>ArchiveViewer</code>","text":"<p>             Bases: <code>Display</code>, <code>TracesTableMixin</code>, <code>AxisTableMixin</code>, <code>ArchiversTabMixin</code></p> Source code in <code>archive_viewer/archive_viewer.py</code> <pre><code>class ArchiveViewer(Display, TracesTableMixin, AxisTableMixin, ArchiversTabMixin):\n    def __init__(self, parent=None, args=None, macros=None, ui_filename=__file__.replace(\".py\", \".ui\")) -&gt; None:\n        super(ArchiveViewer, self).__init__(parent=parent, args=args,\n                                            macros=macros, ui_filename=ui_filename)\n\n        self.ui.main_spltr.setCollapsible(0, False)\n        self.ui.main_spltr.setStretchFactor(0, 1)\n\n        self.axis_table_init()\n        self.traces_table_init()\n        self.archivers_tab_init()\n\n        self.curve_delegates_init()\n        self.axis_delegates_init()\n\n        self.ui.half_min_scale_btn.clicked.connect(lambda _: self.set_plot_timerange(30))\n        self.ui.min_scale_btn.clicked.connect(lambda _: self.set_plot_timerange(60))\n        self.ui.hour_scale_btn.clicked.connect(lambda _: self.set_plot_timerange(3600))\n        self.ui.week_scale_btn.clicked.connect(lambda _: self.set_plot_timerange(604800))\n        self.ui.month_scale_btn.clicked.connect(lambda _: self.set_plot_timerange(2628300))\n        self.ui.auto_scale_btn.toggled.connect(self.ui.archiver_plot.setAutoRangeY)\n\n    @Slot(float)\n    def set_plot_timerange(self, timespan: float) -&gt; None:\n        \"\"\"Sets the Archiver Plot's x-axis to show the requested timespan.\n\n        Parameters\n        ----------\n        timespan : float\n            The number of seconds to show on the plot.\n        \"\"\"\n        curr = time()\n        self.ui.archiver_plot.plotItem.setXRange(curr - timespan, curr)\n</code></pre>"},{"location":"archive_viewer/#archive_viewer.archive_viewer.ArchiveViewer.set_plot_timerange","title":"<code>set_plot_timerange(timespan)</code>","text":"<p>Sets the Archiver Plot's x-axis to show the requested timespan.</p>"},{"location":"archive_viewer/#archive_viewer.archive_viewer.ArchiveViewer.set_plot_timerange--parameters","title":"Parameters","text":"<p>timespan : float     The number of seconds to show on the plot.</p> Source code in <code>archive_viewer/archive_viewer.py</code> <pre><code>@Slot(float)\ndef set_plot_timerange(self, timespan: float) -&gt; None:\n    \"\"\"Sets the Archiver Plot's x-axis to show the requested timespan.\n\n    Parameters\n    ----------\n    timespan : float\n        The number of seconds to show on the plot.\n    \"\"\"\n    curr = time()\n    self.ui.archiver_plot.plotItem.setXRange(curr - timespan, curr)\n</code></pre>"},{"location":"installation/","title":"Installing Archive Viewer","text":""},{"location":"traces_table/","title":"Traces Table","text":""},{"location":"traces_table/#archive_viewer.mixins.traces_table.PVContextMenu","title":"<code>PVContextMenu</code>","text":"<p>             Bases: <code>QMenu</code></p> Source code in <code>archive_viewer/mixins/traces_table.py</code> <pre><code>class PVContextMenu(QMenu):\n    # TODO: Change this QMenu so functions that change data stay in table object\n    #   - Move functions to table widget\n    #   - Init parameters: dict(\"ACTION_NAME\": function)\n    #   - Init: Loop through dict values:\n    #       - Create action w/ name\n    #       - action.triggered.connect(function)\n    #       - self.addAction(action)\n\n    # data_changed_signal = Signal(int)\n\n    # TODO: Archived PVs are no longer draggable from the search tool. Find out why\n\n    def __init__(self, parent: QObject = None) -&gt; None:\n        super().__init__(parent)\n        self._selected_index = None\n        self.archive_search = ArchiveSearchWidget()\n        self._formula_dialog = FormulaDialog(self)\n\n        # Add \"SEARCH PV\" option\n        search_pv_action = QAction(\"SEARCH PV\", self)\n        search_pv_action.triggered.connect(self.archive_search.show)\n        self.addAction(search_pv_action)\n\n        # Add \"FORMULA\" option\n        formula_action = QAction(\"FORMULA\", self)\n        formula_action.triggered.connect(self._formula_dialog.exec_)\n        self.addAction(formula_action)\n\n        import_action = QAction(\"IMPORT CSV\", self)\n        import_action.triggered.connect(self.import_csv)\n        self.addAction(import_action)\n\n    @property\n    def selected_index(self) -&gt; QModelIndex:\n        \"\"\"Get the table's selected index.\"\"\"\n        return self._selected_index\n\n    @selected_index.setter\n    def selected_index(self, ind: QModelIndex) -&gt; None:\n        \"\"\"Set the table's selected index.\"\"\"\n        self._selected_index = ind\n\n    @Slot()\n    def import_csv(self) -&gt; None:\n        # TODO: Add action to import csv\n        pass\n</code></pre>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.PVContextMenu.selected_index","title":"<code>selected_index: QModelIndex</code>  <code>property</code> <code>writable</code>","text":"<p>Get the table's selected index.</p>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin","title":"<code>TracesTableMixin</code>","text":"<p>Mixins class for the Traces tab of the settings section.</p> Source code in <code>archive_viewer/mixins/traces_table.py</code> <pre><code>class TracesTableMixin:\n    \"\"\"Mixins class for the Traces tab of the settings section.\"\"\"\n    def traces_table_init(self) -&gt; None:\n        \"\"\"Initialize the Traces table model and section.\"\"\"\n        self.curves_model = ArchiverCurveModel(self, self.ui.archiver_plot, self.axis_table_model)\n        self.curves_model.append()\n\n        self.ui.traces_tbl.setModel(self.curves_model)\n\n        self.menu = PVContextMenu(self)\n        self.ui.traces_tbl.customContextMenuRequested.connect(\n            self.custom_context_menu)\n\n    def curve_delegates_init(self) -&gt; None:\n        \"\"\"Set column delegates for the Traces table to display widgets.\"\"\"\n        # For the Archive Data column, create a Checkbox widget delegate.\n        archive_del = CheckboxDelegate(self,\n                                       self.curves_model,\n                                       self.ui.traces_tbl)\n        archive_col = self.curves_model.getColumnIndex(\"Archive Data\")\n        self.ui.traces_tbl.setItemDelegateForColumn(archive_col, archive_del)\n\n        # For the Y-Axis Name column, create a ComboBox widget delegate.\n        axis_combo_del = ComboBoxDelegate(self,\n                                          self.curves_model,\n                                          self.ui.traces_tbl,\n                                          self.axis_table_model)\n        axis_col = self.curves_model.getColumnIndex(\"Y-Axis Name\")\n        self.ui.traces_tbl.setItemDelegateForColumn(axis_col, axis_combo_del)\n        axis_combo_del.text_change_signal.connect(self.axis_change)\n\n        # For the Color column, create a Color Button widget delegate.\n        color_button_del = ColorButtonDelegate(self,\n                                               self.curves_model,\n                                               self.ui.traces_tbl)\n        color_col = self.curves_model.getColumnIndex(\"Color\")\n        self.ui.traces_tbl.setItemDelegateForColumn(color_col, color_button_del)\n\n        # For the Style column, use the PyDM CurveStyleDelegate.\n        style_del = CurveStyleDelegate(self,\n                                       self.curves_model,\n                                       self.ui.traces_tbl)\n        style_del.toggleColumnVisibility()\n        style_col = self.curves_model.getColumnIndex(\"Style\")\n        self.ui.traces_tbl.setItemDelegateForColumn(style_col, style_del)\n\n        # Use a delegate to display a button to delete the row.\n        delete_row_del = DeleteRowDelegate(self,\n                                           self.curves_model,\n                                           self.ui.traces_tbl)\n        delete_col = self.curves_model.getColumnIndex(\"\")\n        self.ui.traces_tbl.setItemDelegateForColumn(delete_col, delete_row_del)\n\n        # Resize the column showing the delete row button.\n        hdr = self.ui.traces_tbl.horizontalHeader()\n        hdr.setSectionResizeMode(delete_col, QHeaderView.ResizeToContents)\n\n    @Slot(QPoint)\n    def custom_context_menu(self, pos: QPoint) -&gt; None:\n        \"\"\"Open a custom context menu for the Traces table where the\n        user right-clicks. If the ColorButton is right-clicked, then do\n        not open a context menu.\n\n        Parameters\n        ----------\n        pos : QPoint\n            The position where the context menu should appear\n        \"\"\"\n        table = self.ui.traces_tbl\n        if not table or not isinstance(table, QTableView):\n            logger.error(f\"Internal error: {type(table)} is not QTableView\")\n            return\n\n        index = table.indexAt(pos)\n        is_color = index.column() == self.curves_model.getColumnIndex(\"Color\")\n        logger.debug(f\"ColorButton column selected: {is_color}\")\n\n        if index.isValid() and not is_color:\n            self.menu.selected_index = index\n            self.menu.popup(table.viewport().mapToGlobal(pos))\n\n    @Slot(int, str)\n    def axis_change(self, row: int, axis_name: str) -&gt; None:\n        \"\"\"Slot for connecting a curve to a specified axis.\n\n        Parameters\n        ----------\n        row : int\n            The row of the table associated with the curve changed\n        axis_name : str\n            The name of the new axis the curve should be on\n        \"\"\"\n        curve = self.curves_model.curve_at_index(row)\n        self.ui.archiver_plot.plotItem.linkDataToAxis(curve, axis_name)\n</code></pre>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin.axis_change","title":"<code>axis_change(row, axis_name)</code>","text":"<p>Slot for connecting a curve to a specified axis.</p>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin.axis_change--parameters","title":"Parameters","text":"<p>row : int     The row of the table associated with the curve changed axis_name : str     The name of the new axis the curve should be on</p> Source code in <code>archive_viewer/mixins/traces_table.py</code> <pre><code>@Slot(int, str)\ndef axis_change(self, row: int, axis_name: str) -&gt; None:\n    \"\"\"Slot for connecting a curve to a specified axis.\n\n    Parameters\n    ----------\n    row : int\n        The row of the table associated with the curve changed\n    axis_name : str\n        The name of the new axis the curve should be on\n    \"\"\"\n    curve = self.curves_model.curve_at_index(row)\n    self.ui.archiver_plot.plotItem.linkDataToAxis(curve, axis_name)\n</code></pre>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin.curve_delegates_init","title":"<code>curve_delegates_init()</code>","text":"<p>Set column delegates for the Traces table to display widgets.</p> Source code in <code>archive_viewer/mixins/traces_table.py</code> <pre><code>def curve_delegates_init(self) -&gt; None:\n    \"\"\"Set column delegates for the Traces table to display widgets.\"\"\"\n    # For the Archive Data column, create a Checkbox widget delegate.\n    archive_del = CheckboxDelegate(self,\n                                   self.curves_model,\n                                   self.ui.traces_tbl)\n    archive_col = self.curves_model.getColumnIndex(\"Archive Data\")\n    self.ui.traces_tbl.setItemDelegateForColumn(archive_col, archive_del)\n\n    # For the Y-Axis Name column, create a ComboBox widget delegate.\n    axis_combo_del = ComboBoxDelegate(self,\n                                      self.curves_model,\n                                      self.ui.traces_tbl,\n                                      self.axis_table_model)\n    axis_col = self.curves_model.getColumnIndex(\"Y-Axis Name\")\n    self.ui.traces_tbl.setItemDelegateForColumn(axis_col, axis_combo_del)\n    axis_combo_del.text_change_signal.connect(self.axis_change)\n\n    # For the Color column, create a Color Button widget delegate.\n    color_button_del = ColorButtonDelegate(self,\n                                           self.curves_model,\n                                           self.ui.traces_tbl)\n    color_col = self.curves_model.getColumnIndex(\"Color\")\n    self.ui.traces_tbl.setItemDelegateForColumn(color_col, color_button_del)\n\n    # For the Style column, use the PyDM CurveStyleDelegate.\n    style_del = CurveStyleDelegate(self,\n                                   self.curves_model,\n                                   self.ui.traces_tbl)\n    style_del.toggleColumnVisibility()\n    style_col = self.curves_model.getColumnIndex(\"Style\")\n    self.ui.traces_tbl.setItemDelegateForColumn(style_col, style_del)\n\n    # Use a delegate to display a button to delete the row.\n    delete_row_del = DeleteRowDelegate(self,\n                                       self.curves_model,\n                                       self.ui.traces_tbl)\n    delete_col = self.curves_model.getColumnIndex(\"\")\n    self.ui.traces_tbl.setItemDelegateForColumn(delete_col, delete_row_del)\n\n    # Resize the column showing the delete row button.\n    hdr = self.ui.traces_tbl.horizontalHeader()\n    hdr.setSectionResizeMode(delete_col, QHeaderView.ResizeToContents)\n</code></pre>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin.custom_context_menu","title":"<code>custom_context_menu(pos)</code>","text":"<p>Open a custom context menu for the Traces table where the user right-clicks. If the ColorButton is right-clicked, then do not open a context menu.</p>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin.custom_context_menu--parameters","title":"Parameters","text":"<p>pos : QPoint     The position where the context menu should appear</p> Source code in <code>archive_viewer/mixins/traces_table.py</code> <pre><code>@Slot(QPoint)\ndef custom_context_menu(self, pos: QPoint) -&gt; None:\n    \"\"\"Open a custom context menu for the Traces table where the\n    user right-clicks. If the ColorButton is right-clicked, then do\n    not open a context menu.\n\n    Parameters\n    ----------\n    pos : QPoint\n        The position where the context menu should appear\n    \"\"\"\n    table = self.ui.traces_tbl\n    if not table or not isinstance(table, QTableView):\n        logger.error(f\"Internal error: {type(table)} is not QTableView\")\n        return\n\n    index = table.indexAt(pos)\n    is_color = index.column() == self.curves_model.getColumnIndex(\"Color\")\n    logger.debug(f\"ColorButton column selected: {is_color}\")\n\n    if index.isValid() and not is_color:\n        self.menu.selected_index = index\n        self.menu.popup(table.viewport().mapToGlobal(pos))\n</code></pre>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin.traces_table_init","title":"<code>traces_table_init()</code>","text":"<p>Initialize the Traces table model and section.</p> Source code in <code>archive_viewer/mixins/traces_table.py</code> <pre><code>def traces_table_init(self) -&gt; None:\n    \"\"\"Initialize the Traces table model and section.\"\"\"\n    self.curves_model = ArchiverCurveModel(self, self.ui.archiver_plot, self.axis_table_model)\n    self.curves_model.append()\n\n    self.ui.traces_tbl.setModel(self.curves_model)\n\n    self.menu = PVContextMenu(self)\n    self.ui.traces_tbl.customContextMenuRequested.connect(\n        self.custom_context_menu)\n</code></pre>"}]}