{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Archive Viewer","text":"<p>The Archive Viewer is a python application </p>"},{"location":"archive_viewer/","title":"Archive Viewer","text":""},{"location":"archive_viewer/#archive_viewer.archive_viewer.ArchiveViewer","title":"<code>ArchiveViewer</code>","text":"<p>             Bases: <code>Display</code>, <code>TracesTableMixin</code>, <code>AxisTableMixin</code></p> Source code in <code>archive_viewer/archive_viewer.py</code> <pre><code>class ArchiveViewer(Display, TracesTableMixin, AxisTableMixin):\n    def __init__(self, parent=None, args=None, macros=None, ui_filename=__file__.replace(\".py\", \".ui\")) -&gt; None:\n        super(ArchiveViewer, self).__init__(parent=parent, args=args,\n                                            macros=macros, ui_filename=ui_filename)\n\n        self.ui.main_spltr.setCollapsible(0, False)\n        self.ui.main_spltr.setStretchFactor(0, 1)\n\n        self.axis_table_init()\n        self.traces_table_init()\n\n        self.curve_delegates_init()\n        self.axis_delegates_init()\n\n        self.button_spans = {self.ui.half_min_scale_btn: 30,\n                             self.ui.min_scale_btn: 60,\n                             self.ui.hour_scale_btn: 3600,\n                             self.ui.week_scale_btn: 604800,\n                             self.ui.month_scale_btn: 2628300,\n                             self.ui.cursor_scale_btn: -1}\n        self.ui.timespan_btns.buttonClicked.connect(partial(self.set_plot_timerange))\n\n        plot_viewbox = self.ui.archiver_plot.plotItem.vb\n        plot_viewbox.sigRangeChangedManually.connect(self.ui.cursor_scale_btn.click)\n\n        plot_x_axis = self.ui.archiver_plot.getXAxis()\n        plot_x_axis.sigMouseInteraction.connect(self.ui.cursor_scale_btn.click)\n\n        app = QApplication.instance()\n        app.setStyle(CenterCheckStyle())\n\n    @Slot(QAbstractButton)\n    def set_plot_timerange(self, button: QAbstractButton) -&gt; None:\n        \"\"\"Slot to be called when a timespan setting button is pressed.\n        This will enable autoscrolling along the x-axis and disable mouse\n        controls. If the \"Cursor\" button is pressed, then autoscrolling is\n        disabled and mouse controls are enabled.\n\n        Parameters\n        ----------\n        button : QAbstractButton\n            The timespan setting button pressed. Determines which timespan\n            to set.\n        \"\"\"\n        if button not in self.button_spans:\n            logger.error(f\"{button} is not a valid timespan button\")\n            return\n\n        enable_scroll = (button != self.ui.cursor_scale_btn)\n        timespan = self.button_spans[button]\n\n        self.ui.archiver_plot.setAutoScroll(enable_scroll, timespan)\n</code></pre>"},{"location":"archive_viewer/#archive_viewer.archive_viewer.ArchiveViewer.set_plot_timerange","title":"<code>set_plot_timerange(button)</code>","text":"<p>Slot to be called when a timespan setting button is pressed. This will enable autoscrolling along the x-axis and disable mouse controls. If the \"Cursor\" button is pressed, then autoscrolling is disabled and mouse controls are enabled.</p>"},{"location":"archive_viewer/#archive_viewer.archive_viewer.ArchiveViewer.set_plot_timerange--parameters","title":"Parameters","text":"<p>button : QAbstractButton     The timespan setting button pressed. Determines which timespan     to set.</p> Source code in <code>archive_viewer/archive_viewer.py</code> <pre><code>@Slot(QAbstractButton)\ndef set_plot_timerange(self, button: QAbstractButton) -&gt; None:\n    \"\"\"Slot to be called when a timespan setting button is pressed.\n    This will enable autoscrolling along the x-axis and disable mouse\n    controls. If the \"Cursor\" button is pressed, then autoscrolling is\n    disabled and mouse controls are enabled.\n\n    Parameters\n    ----------\n    button : QAbstractButton\n        The timespan setting button pressed. Determines which timespan\n        to set.\n    \"\"\"\n    if button not in self.button_spans:\n        logger.error(f\"{button} is not a valid timespan button\")\n        return\n\n    enable_scroll = (button != self.ui.cursor_scale_btn)\n    timespan = self.button_spans[button]\n\n    self.ui.archiver_plot.setAutoScroll(enable_scroll, timespan)\n</code></pre>"},{"location":"installation/","title":"Installing Archive Viewer","text":""},{"location":"traces_table/","title":"Traces Table","text":""},{"location":"traces_table/#archive_viewer.mixins.traces_table.PVContextMenu","title":"<code>PVContextMenu</code>","text":"<p>             Bases: <code>QMenu</code></p> Source code in <code>archive_viewer/mixins/traces_table.py</code> <pre><code>class PVContextMenu(QMenu):\n    # TODO: Change this QMenu so functions that change data stay in table object\n    #   - Move functions to table widget\n    #   - Init parameters: dict(\"ACTION_NAME\": function)\n    #   - Init: Loop through dict values:\n    #       - Create action w/ name\n    #       - action.triggered.connect(function)\n    #       - self.addAction(action)\n\n    # data_changed_signal = Signal(int)\n\n    # TODO: Archived PVs are no longer draggable from the search tool. Find out why\n\n    def __init__(self, parent: QObject = None) -&gt; None:\n        super().__init__(parent)\n        self._selected_index = None\n        self.archive_search = ArchiveSearchWidget()\n        self._formula_dialog = FormulaDialog(self)\n\n        # Add \"SEARCH PV\" option\n        search_pv_action = QAction(\"SEARCH PV\", self)\n        search_pv_action.triggered.connect(self.archive_search.show)\n        self.addAction(search_pv_action)\n\n        # Add \"FORMULA\" option\n        formula_action = QAction(\"FORMULA\", self)\n        formula_action.triggered.connect(self._formula_dialog.exec_)\n        self.addAction(formula_action)\n\n        import_action = QAction(\"IMPORT CSV\", self)\n        import_action.triggered.connect(self.import_csv)\n        self.addAction(import_action)\n\n    @property\n    def selected_index(self) -&gt; QModelIndex:\n        \"\"\"Get the table's selected index.\"\"\"\n        return self._selected_index\n\n    @selected_index.setter\n    def selected_index(self, ind: QModelIndex) -&gt; None:\n        \"\"\"Set the table's selected index.\"\"\"\n        self._selected_index = ind\n\n    @Slot()\n    def import_csv(self) -&gt; None:\n        # TODO: Add action to import csv\n        pass\n</code></pre>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.PVContextMenu.selected_index","title":"<code>selected_index: QModelIndex</code>  <code>property</code> <code>writable</code>","text":"<p>Get the table's selected index.</p>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin","title":"<code>TracesTableMixin</code>","text":"<p>Mixins class for the Traces tab of the settings section.</p> Source code in <code>archive_viewer/mixins/traces_table.py</code> <pre><code>class TracesTableMixin:\n    \"\"\"Mixins class for the Traces tab of the settings section.\"\"\"\n    def traces_table_init(self) -&gt; None:\n        \"\"\"Initialize the Traces table model and section.\"\"\"\n        self.curves_model = ArchiverCurveModel(self, self.ui.archiver_plot, self.axis_table_model)\n        self.curves_model.append()\n\n        self.ui.traces_tbl.setModel(self.curves_model)\n\n        self.menu = PVContextMenu(self)\n        self.ui.traces_tbl.customContextMenuRequested.connect(\n            self.custom_context_menu)\n\n        hdr = self.ui.traces_tbl.horizontalHeader()\n        hdr.setSectionResizeMode(QHeaderView.Stretch)\n        channel_col = self.curves_model.getColumnIndex(\"Channel\")\n        hdr.setSectionResizeMode(channel_col, QHeaderView.ResizeToContents)\n        hdr.setSectionResizeMode(self.curves_model.getColumnIndex(\"\"), QHeaderView.ResizeToContents)\n\n    def curve_delegates_init(self) -&gt; None:\n        \"\"\"Set column delegates for the Traces table to display widgets.\"\"\"\n        axis_col = self.curves_model.getColumnIndex(\"Y-Axis Name\")\n        axis_combo_del = ComboBoxDelegate(self.ui.traces_tbl, self.axis_table_model)\n        axis_combo_del.sigTextChange.connect(self.axis_change)\n        self.ui.traces_tbl.setItemDelegateForColumn(axis_col, axis_combo_del)\n\n        color_col = self.curves_model.getColumnIndex(\"Color\")\n        color_button_del = ColorButtonDelegate(self.ui.traces_tbl)\n        self.ui.traces_tbl.setItemDelegateForColumn(color_col, color_button_del)\n\n        style_col = self.curves_model.getColumnIndex(\"Style\")\n        style_del = PlotStyleColumnDelegate(self,\n                                       self.curves_model,\n                                       self.ui.traces_tbl)\n        style_del.toggleColumnVisibility()\n        self.ui.traces_tbl.setItemDelegateForColumn(style_col, style_del)\n\n        styles = BasePlotCurveItem.lines\n        line_style_col = self.curves_model.getColumnIndex(\"Line Style\")\n        line_style_del = ComboBoxDelegate(self.ui.traces_tbl, styles)\n        self.ui.traces_tbl.setItemDelegateForColumn(line_style_col, line_style_del)\n\n        size_data = {f\"{i}px\": i for i in range(1, 6)}\n        line_width_col = self.curves_model.getColumnIndex(\"Line Width\")\n        line_width_del = ComboBoxDelegate(self.ui.traces_tbl, size_data)\n        self.ui.traces_tbl.setItemDelegateForColumn(line_width_col, line_width_del)\n\n        symbols = BasePlotCurveItem.symbols\n        symbol_col = self.curves_model.getColumnIndex(\"Symbol\")\n        symbol_del = ComboBoxDelegate(self.ui.traces_tbl, symbols)\n        self.ui.traces_tbl.setItemDelegateForColumn(symbol_col, symbol_del)\n\n        size_data = {f\"{i}px\": i for i in range(5, 26, 5)}\n        symbol_size_col = self.curves_model.getColumnIndex(\"Symbol Size\")\n        symbol_size_del = ComboBoxDelegate(self.ui.traces_tbl, size_data)\n        self.ui.traces_tbl.setItemDelegateForColumn(symbol_size_col, symbol_size_del)\n\n        bar_width_col = self.curves_model.getColumnIndex(\"Bar Width\")\n        bar_width_del = FloatDelegate(self.ui.traces_tbl, init_range=(.1, 5))\n        self.ui.traces_tbl.setItemDelegateForColumn(bar_width_col, bar_width_del)\n\n        upper_limit_col = self.curves_model.getColumnIndex(\"Upper Limit\")\n        upper_limit_del = FloatDelegate(self.ui.traces_tbl, init_range=(0, float(\"inf\")))\n        self.ui.traces_tbl.setItemDelegateForColumn(upper_limit_col, upper_limit_del)\n\n        lower_limit_col = self.curves_model.getColumnIndex(\"Lower Limit\")\n        lower_limit_del = FloatDelegate(self.ui.traces_tbl, init_range=(0, float(\"inf\")))\n        self.ui.traces_tbl.setItemDelegateForColumn(lower_limit_col, lower_limit_del)\n\n        limit_color_col = self.curves_model.getColumnIndex(\"Limit Color\")\n        limit_color_del = ColorButtonDelegate(self.ui.traces_tbl)\n        self.ui.traces_tbl.setItemDelegateForColumn(limit_color_col, limit_color_del)\n\n        delete_col = self.curves_model.getColumnIndex(\"\")\n        delete_row_del = DeleteRowDelegate(self.ui.traces_tbl)\n        self.ui.traces_tbl.setItemDelegateForColumn(delete_col, delete_row_del)\n\n    @Slot(QPoint)\n    def custom_context_menu(self, pos: QPoint) -&gt; None:\n        \"\"\"Open a custom context menu for the Traces table where the\n        user right-clicks. If the ColorButton is right-clicked, then do\n        not open a context menu.\n\n        Parameters\n        ----------\n        pos : QPoint\n            The position where the context menu should appear\n        \"\"\"\n        table = self.ui.traces_tbl\n        if not table or not isinstance(table, QTableView):\n            logger.error(f\"Internal error: {type(table)} is not QTableView\")\n            return\n\n        index = table.indexAt(pos)\n        is_color = index.column() == self.curves_model.getColumnIndex(\"Color\")\n        logger.debug(f\"ColorButton column selected: {is_color}\")\n\n        if index.isValid() and not is_color:\n            self.menu.selected_index = index\n            self.menu.popup(table.viewport().mapToGlobal(pos))\n\n    @Slot(int, str)\n    def axis_change(self, row: int, axis_name: str) -&gt; None:\n        \"\"\"Slot for connecting a curve to a specified axis.\n\n        Parameters\n        ----------\n        row : int\n            The row of the table associated with the curve changed\n        axis_name : str\n            The name of the new axis the curve should be on\n        \"\"\"\n        curve = self.curves_model.curve_at_index(row)\n        self.ui.archiver_plot.plotItem.linkDataToAxis(curve, axis_name)\n</code></pre>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin.axis_change","title":"<code>axis_change(row, axis_name)</code>","text":"<p>Slot for connecting a curve to a specified axis.</p>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin.axis_change--parameters","title":"Parameters","text":"<p>row : int     The row of the table associated with the curve changed axis_name : str     The name of the new axis the curve should be on</p> Source code in <code>archive_viewer/mixins/traces_table.py</code> <pre><code>@Slot(int, str)\ndef axis_change(self, row: int, axis_name: str) -&gt; None:\n    \"\"\"Slot for connecting a curve to a specified axis.\n\n    Parameters\n    ----------\n    row : int\n        The row of the table associated with the curve changed\n    axis_name : str\n        The name of the new axis the curve should be on\n    \"\"\"\n    curve = self.curves_model.curve_at_index(row)\n    self.ui.archiver_plot.plotItem.linkDataToAxis(curve, axis_name)\n</code></pre>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin.curve_delegates_init","title":"<code>curve_delegates_init()</code>","text":"<p>Set column delegates for the Traces table to display widgets.</p> Source code in <code>archive_viewer/mixins/traces_table.py</code> <pre><code>def curve_delegates_init(self) -&gt; None:\n    \"\"\"Set column delegates for the Traces table to display widgets.\"\"\"\n    axis_col = self.curves_model.getColumnIndex(\"Y-Axis Name\")\n    axis_combo_del = ComboBoxDelegate(self.ui.traces_tbl, self.axis_table_model)\n    axis_combo_del.sigTextChange.connect(self.axis_change)\n    self.ui.traces_tbl.setItemDelegateForColumn(axis_col, axis_combo_del)\n\n    color_col = self.curves_model.getColumnIndex(\"Color\")\n    color_button_del = ColorButtonDelegate(self.ui.traces_tbl)\n    self.ui.traces_tbl.setItemDelegateForColumn(color_col, color_button_del)\n\n    style_col = self.curves_model.getColumnIndex(\"Style\")\n    style_del = PlotStyleColumnDelegate(self,\n                                   self.curves_model,\n                                   self.ui.traces_tbl)\n    style_del.toggleColumnVisibility()\n    self.ui.traces_tbl.setItemDelegateForColumn(style_col, style_del)\n\n    styles = BasePlotCurveItem.lines\n    line_style_col = self.curves_model.getColumnIndex(\"Line Style\")\n    line_style_del = ComboBoxDelegate(self.ui.traces_tbl, styles)\n    self.ui.traces_tbl.setItemDelegateForColumn(line_style_col, line_style_del)\n\n    size_data = {f\"{i}px\": i for i in range(1, 6)}\n    line_width_col = self.curves_model.getColumnIndex(\"Line Width\")\n    line_width_del = ComboBoxDelegate(self.ui.traces_tbl, size_data)\n    self.ui.traces_tbl.setItemDelegateForColumn(line_width_col, line_width_del)\n\n    symbols = BasePlotCurveItem.symbols\n    symbol_col = self.curves_model.getColumnIndex(\"Symbol\")\n    symbol_del = ComboBoxDelegate(self.ui.traces_tbl, symbols)\n    self.ui.traces_tbl.setItemDelegateForColumn(symbol_col, symbol_del)\n\n    size_data = {f\"{i}px\": i for i in range(5, 26, 5)}\n    symbol_size_col = self.curves_model.getColumnIndex(\"Symbol Size\")\n    symbol_size_del = ComboBoxDelegate(self.ui.traces_tbl, size_data)\n    self.ui.traces_tbl.setItemDelegateForColumn(symbol_size_col, symbol_size_del)\n\n    bar_width_col = self.curves_model.getColumnIndex(\"Bar Width\")\n    bar_width_del = FloatDelegate(self.ui.traces_tbl, init_range=(.1, 5))\n    self.ui.traces_tbl.setItemDelegateForColumn(bar_width_col, bar_width_del)\n\n    upper_limit_col = self.curves_model.getColumnIndex(\"Upper Limit\")\n    upper_limit_del = FloatDelegate(self.ui.traces_tbl, init_range=(0, float(\"inf\")))\n    self.ui.traces_tbl.setItemDelegateForColumn(upper_limit_col, upper_limit_del)\n\n    lower_limit_col = self.curves_model.getColumnIndex(\"Lower Limit\")\n    lower_limit_del = FloatDelegate(self.ui.traces_tbl, init_range=(0, float(\"inf\")))\n    self.ui.traces_tbl.setItemDelegateForColumn(lower_limit_col, lower_limit_del)\n\n    limit_color_col = self.curves_model.getColumnIndex(\"Limit Color\")\n    limit_color_del = ColorButtonDelegate(self.ui.traces_tbl)\n    self.ui.traces_tbl.setItemDelegateForColumn(limit_color_col, limit_color_del)\n\n    delete_col = self.curves_model.getColumnIndex(\"\")\n    delete_row_del = DeleteRowDelegate(self.ui.traces_tbl)\n    self.ui.traces_tbl.setItemDelegateForColumn(delete_col, delete_row_del)\n</code></pre>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin.custom_context_menu","title":"<code>custom_context_menu(pos)</code>","text":"<p>Open a custom context menu for the Traces table where the user right-clicks. If the ColorButton is right-clicked, then do not open a context menu.</p>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin.custom_context_menu--parameters","title":"Parameters","text":"<p>pos : QPoint     The position where the context menu should appear</p> Source code in <code>archive_viewer/mixins/traces_table.py</code> <pre><code>@Slot(QPoint)\ndef custom_context_menu(self, pos: QPoint) -&gt; None:\n    \"\"\"Open a custom context menu for the Traces table where the\n    user right-clicks. If the ColorButton is right-clicked, then do\n    not open a context menu.\n\n    Parameters\n    ----------\n    pos : QPoint\n        The position where the context menu should appear\n    \"\"\"\n    table = self.ui.traces_tbl\n    if not table or not isinstance(table, QTableView):\n        logger.error(f\"Internal error: {type(table)} is not QTableView\")\n        return\n\n    index = table.indexAt(pos)\n    is_color = index.column() == self.curves_model.getColumnIndex(\"Color\")\n    logger.debug(f\"ColorButton column selected: {is_color}\")\n\n    if index.isValid() and not is_color:\n        self.menu.selected_index = index\n        self.menu.popup(table.viewport().mapToGlobal(pos))\n</code></pre>"},{"location":"traces_table/#archive_viewer.mixins.traces_table.TracesTableMixin.traces_table_init","title":"<code>traces_table_init()</code>","text":"<p>Initialize the Traces table model and section.</p> Source code in <code>archive_viewer/mixins/traces_table.py</code> <pre><code>def traces_table_init(self) -&gt; None:\n    \"\"\"Initialize the Traces table model and section.\"\"\"\n    self.curves_model = ArchiverCurveModel(self, self.ui.archiver_plot, self.axis_table_model)\n    self.curves_model.append()\n\n    self.ui.traces_tbl.setModel(self.curves_model)\n\n    self.menu = PVContextMenu(self)\n    self.ui.traces_tbl.customContextMenuRequested.connect(\n        self.custom_context_menu)\n\n    hdr = self.ui.traces_tbl.horizontalHeader()\n    hdr.setSectionResizeMode(QHeaderView.Stretch)\n    channel_col = self.curves_model.getColumnIndex(\"Channel\")\n    hdr.setSectionResizeMode(channel_col, QHeaderView.ResizeToContents)\n    hdr.setSectionResizeMode(self.curves_model.getColumnIndex(\"\"), QHeaderView.ResizeToContents)\n</code></pre>"}]}